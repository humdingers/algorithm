package com.unisound.algorithm.greedy;

//有效的括号字符串
/*
 * 给定一个只包含三种字符的字符串：（ ，） 和 *，写一个函数来检验这个字符串是否为有效字符串。有效字符串具有如下规则：

        任何左括号 ( 必须有相应的右括号 )。
        任何右括号 ) 必须有相应的左括号 ( 。
        左括号 ( 必须在对应的右括号之前 )。
        * 可以被视为单个右括号 ) ，或单个左括号 ( ，或一个空字符串。
        一个空字符串也被视为有效字符串。
        示例 1:
        
        输入: "()"
        输出: True
        示例 2:
        
        输入: "(*)"
        输出: True
 */
public class CheckValidString
{

    public boolean checkValidString(String s)
    {
        int L = 0;
        int R = 0;

        // L,R分别表示左括号的最小可能数和最大可能数
        for (char c : s.toCharArray()) {
            // 如果是左括号，最小可能和最大可能都增加
            if (c == '(') {
                L++;
                R++;
            }

            // 如果是右括号，最小可能和最大可能都减小，抵消掉一个左括号
            else if (c == ')') {
                if (L > 0) {
                    L--;
                }

                if (R > 0) {
                    R--;
                    // 最大可能不能小于等于0，否则最大就变成负数，这种情况不能使得括号有效（问题成立）
                } else {
                    return false;
                }
            } else if (c == '*') {
                // 如果是*，那么*可能是左括号，也可能是右括号，所以右括号最小可能减少，左括号最大可能增多
                // 贪心策略，保证此时L是左括号数的最小可能，R为最大可能
                if (L > 0) {
                    L--;
                }
                R++;

            }

        }

        // 注意
        // 根据制定的贪心策略，要使得问题成立，左括号最小可能要小于等于0，同时要保证最大可能大于等于0，不能小于0
        return L <= 0 && R >= 0;

    }
}
