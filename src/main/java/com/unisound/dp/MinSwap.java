package com.unisound.dp;

// 801. 使序列递增的最小交换次数
/*
 * 我们有两个长度相等且不为空的整型数组 A 和 B 。

    我们可以交换 A[i] 和 B[i] 的元素。注意这两个元素在各自的序列中应该处于相同的位置。
    
    在交换过一些元素之后，数组 A 和 B 都应该是严格递增的（数组严格递增的条件仅为A[0] < A[1] < A[2] < ... < A[A.length - 1]）。
    
    给定数组 A 和 B ，请返回使得两个数组均保持严格递增状态的最小交换次数。假设给定的输入总是有效的。
    
    示例:
    输入: A = [1,3,5,4], B = [1,2,3,7]
    输出: 1
    解释: 
    交换 A[3] 和 B[3] 后，两个数组如下:
    A = [1, 3, 5, 7] ， B = [1, 2, 3, 4]
    两个数组均为严格递增的。

 */
public class MinSwap
{
    public int minSwap(int[] A, int[] B)
    {
        int n1 = 0;
        int s1 = 1;

        for (int i = 1; i < A.length; i++) {
            // 每次当前交换次数都要初始化
            int n2 = Integer.MAX_VALUE;
            int s2 = Integer.MAX_VALUE;
            if (A[i - 1] < A[i] && B[i - 1] < B[i]) {
                n2 = Math.min(n2, n1); // 如果前面不交换，现在也不用交换，因为已经是单调递增
                s2 = Math.min(s2, s1 + 1);// 如果已经严格递增，那么直接交换显然毫无意义，一定是之前交换了导致现在不是严格递增，所以才要交换这一组数。

            }

            if (A[i - 1] < B[i] && B[i - 1] < A[i]) {
                // 如果现在不是单调递增，那么要么交换这一组数，要么交换前面一组数。
                // 因为根据判断条件可知，我只要交换任意i或者i-1就能让数组单调递增，但是可能会导致其他的数单调递增被破坏。
                // 如果我交换i，那么i+1就可能被破坏
                // 如果我交换i-1，那么就是前面那个if条件，已经判断过了。
                n2 = Math.min(n2, s1);
                s2 = Math.min(s2, n1 + 1);
            }

            // 如果两个条件都满足了，那么可以交换也可以不交换。
            // 如果不交换，那么检查之前s1和n1哪个更小，因为不管之前交不交换，都满足单调递增。
            // 如果交换，同样检查之前s1和n1哪个更小，但是个人认为n1一定会比s1要小。

            n1 = n2;
            s1 = s2;

        }

        return Math.min(s1, n1);

    }

}
